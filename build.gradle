plugins {
  id 'java-library'
//  id "com.github.johnrengelman.shadow" version "${shadowPluginVersion}"
  id 'com.diffplug.spotless' version "${spotlessPluginVersion}"
  id 'net.ltgt.errorprone' version "${errorPronePluginVersion}"
  id 'checkstyle'
  id 'maven-publish'
  id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

spotless {
  java {
    toggleOffOn('fmt:off', 'fmt:on')
    removeUnusedImports()
    importOrder()
    eclipse().configFile("${rootDir}/formatter.xml")    
  }
}    

dependencies {

  annotationProcessor 'org.immutables:value:2.9.3'
  compileOnly 'org.immutables:value:2.9.3'
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
  implementation "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
  implementation "commons-dbutils:commons-dbutils:${dbUtilsVersion}"
//  implementation "dev.walgo:walib:0.5.0"
  implementation files("../walib/build/libs/walib-0.5.0.jar")

  errorprone "com.google.errorprone:error_prone_core:${errorProneVersion}"

  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
  testImplementation "org.assertj:assertj-core:${assertjVersion}"
// https://mvnrepository.com/artifact/org.hsqldb/hsqldb
  testImplementation "org.hsqldb:hsqldb:${hsqldbVersion}"
// https://mvnrepository.com/artifact/org.hsqldb/sqltool
  testImplementation "org.hsqldb:sqltool:${hsqldbVersion}"

  testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
  testImplementation "ch.qos.logback:logback-core:${logbackVersion}"


}

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters' << "-Xlint:unchecked" << "-Xlint:deprecation"
  dependsOn 'spotlessApply'
  options.errorprone {
      disableWarningsInGeneratedCode = true
      ignoreUnknownCheckNames = true
      allErrorsAsWarnings = true
      // workaround for: https://github.com/google/error-prone/issues/780
//      errorproneArgs = ['-Xep:ParameterName:OFF',
//                        '-Xep:FallThrough:OFF',
//                        '-Xep:UnusedVariable:OFF',
//                        '-Xep:UnusedMethod:OFF',
//                        '-Xep:FunctionalInterfaceClash:OFF',
//                        '-Xep:AssertionFailureIgnored:OFF',
//                        '-Xlint:unchecked',
//                        '-Xlint:deprecation'
//      ]
    }  
} 

compileTestJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters' << "-Xlint:unchecked" << "-Xlint:deprecation"
} 


def defaultManifest(def defaultTitle = null, def defaultVersion = null) {
  ['Implementation-Title': defaultTitle != null ? defaultTitle : title,
   'Implementation-Version': defaultVersion != null ? defaultVersion : version,
   'Implementation-Time': new Date().format("yyyy-MM-dd HH:mm:ss"),
   'Built-By': System.getProperty('user.name'),
   'Built-JDK': System.getProperty('java.version')
  ]
}

test {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
  minHeapSize = "512m"
  maxHeapSize = "1024m"

// listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

// listen to standard out and standard error of the test JVM(s)
//    onOutput { descriptor, event ->
//      logger.lifecycle(descriptor + ": " + event.message)
//    }

  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
  }
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
    }
  }
}

